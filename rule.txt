simple_stmt ->  expression_stmt
simple_stmt ->  assert_stmt
simple_stmt ->  assignment_stmt
simple_stmt ->  augmented_assignment_stmt
simple_stmt ->  annotated_assignment_stmt
simple_stmt ->  pass_stmt
simple_stmt ->  del_stmt
simple_stmt ->  return_stmt
simple_stmt ->  raise_stmt
simple_stmt ->  break_stmt
simple_stmt ->  continue_stmt
simple_stmt ->  import_stmt
simple_stmt ->  future_stmt
simple_stmt ->  global_stmt
simple_stmt ->  nonlocal_stmt
expression_stmt ->  starred_expression
assignment_stmt ->  (target_list "=")+ (starred_expression)
target_list     ->  target ("," target)* [","]
target          ->  identifier
target          ->  "(" [target_list] ")"
target          ->  "[" [target_list] "]"
target          ->  attributeref
target          ->  subscription
target          ->  slicing
target          ->  "*" target
augmented_assignment_stmt ->  augtarget augop (expression_list)
augtarget                 ->  identifier
augtarget                 ->  attributeref
augtarget                 ->  subscription
augtarget                 ->  slicing
augop                     ->  "+="
augop                     ->  "-="
augop                     ->  "*="
augop                     ->  "@="
augop                     ->  "/="
augop                     ->  "//="
augop                     ->  "%="
augop                     ->  "**="
augop                     ->  ">>="
augop                     ->  "<<="
augop                     ->  "&="
augop                     ->  "^="
augop                     ->  "|="
annotated_assignment_stmt ->  augtarget ":" expression
                              ["=" (starred_expression)]
assert_stmt     ->  "assert" expression ["," expression]
pass_stmt       ->  "pass"
del_stmt        ->  "del" target_list
return_stmt     ->  "return" [expression_list]
raise_stmt      ->  "raise" [expression ["from" expression]]
break_stmt      ->  "break"
continue_stmt   ->  "continue"
import_stmt     ->  "import" module ["as" identifier] ("," module ["as" identifier])*
import_stmt     ->  "from" relative_module "import" identifier ["as" identifier]
                     ("," identifier ["as" identifier])*
import_stmt     ->  "from" relative_module "import" "(" identifier ["as" identifier]
                     ("," identifier ["as" identifier])* [","] ")"
import_stmt     ->  "from" module "import" "*"
module          ->  (identifier ".")* identifier
relative_module ->  "."* module | "."+
future_stmt ->  "from" "__future__" "import" feature ["as" identifier]
                 ("," feature ["as" identifier])*
future_stmt ->  "from" "__future__" "import" "(" feature ["as" identifier]
                 ("," feature ["as" identifier])* [","] ")"
feature     ->  identifier
global_stmt ->  "global" identifier ("," identifier)*
nonlocal_stmt ->  "nonlocal" identifier ("," identifier)*


compound_stmt ->   if_stmt
compound_stmt ->   while_stmt
compound_stmt ->   for_stmt
compound_stmt ->   try_stmt
compound_stmt ->   with_stmt
compound_stmt ->   funcdef
compound_stmt ->   classdef
suite         ->   stmt_list NEWLINE
suite         ->   NEWLINE INDENT statement+ DETENT
statement     ->   stmt_list NEWLINE
statement     ->   compound_stmt
stmt_list     ->   simple_stmt(";" simple_stmt)*[";"]

if_stmt         ->  "if" expression ":" suite
                    ("elif" expression ":" suite)*
                    ["else" expression ":" suite]
while_stmt      ->  "while" expression ":" suite
                    ["else" ":" suite]
for_stmt        ->  "for" target_list "in" expression_list ":" suite
                    ["else" ":" suite]
try_stmt       ->  "try" ":" suite
                    ("except" [expression ["as" identifier]] ":" suite)+
                    ["else" ":" suite]
                    ["finally" ":" suite]
try_stmt        ->  "try" ":" suite
                    "finally" ":" suite
with_stmt       ->  "with" with_item ("," with_item)* ":" suite
with_item       ->  expression ["as" target]
funcdef                     ->  [decorators] "def" funcname "(" [parameter_list] ")"
                                ["->" expression] ":" suite
decorators                  ->  decorator+
decorator                   -> "@" dotted_name ["(" [argument_list [","]] ")"] NEWLINE
dotted_name                 -> identifier ("." identifier)*
parameter_list              -> defparameter ("," defparameter)* "," "/" ["," [parameter_list_no_posonly]]
parameter_list              -> parameter_list_no_posonly
parameter_list_no_posonly   -> defparameter ("," defparameter)* ["," [parameter_list_starargs]]
parameter_list_no_posonly   -> parameter_list_starargs
parameter_list_starargs     -> "*" [parameter] ("," defparameter)* ["," ["**" parameter [","]]]
parameter_list_starargs     -> "**" parameter [","]
parameter                   -> identifier [":" expression]
defparameter                -> parameter ["=" expression]
funcname                    -> identifier
classdef    ->  [decorators] "class" classname [inheritance] ":" suite
inheritance ->  "(" [argument_list] ")"
classname   ->  identifier


or_test -> and_test ('or' and_test)*
and_test-> not_test ('and' not_test)*
not_test-> 'not' not_test
not_test-> comparison
comparison-> expression (comp_op expression)*
comp_op -> '<'
comp_op -> '>'
comp_op -> '=='
comp_op -> '>='
comp_op -> '<='
comp_op -> '<>'
comp_op -> '!='
comp_op -> 'in'
comp_op -> 'not' 'in'
comp_op -> 'is'
comp_op -> 'is' 'not'

false_stmt  -> "False"
none        -> "None"
true        -> "True"





expression_list     -> expression(","expression)*[","]
starred_list        -> starred_item(","starred_item)*[","]
starred_expression  -> expression
starred_expression  -> (starred_item",")*[starred_item]
starred_item        -> expression
starred_item        ->  "*" or_expr
expression_stmt     -> starred_expression
